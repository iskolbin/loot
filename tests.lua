print( 'Testing loot package' )
print( '====================' )

require('loot').export()

print( 'Testing nkeys()', assert( nkeys{1,2,3,4,5,6,7,x=8,y=9,z={10}} == 10 ))
print( 'Testing equal()', assert( equal( {1,2,3,4,5,t = {1,2}, k = {"8","z"}, z = {1,1}, y = {{{},{},},2,3,4}}, {1,2,3,4,5,t = {1,2}, k = {"8","z"}, z = {1,1}, y = {{{},{},},2,3,4}} )))
print( 'Testing not equal()', assert( not equal( {1,2,3,4,5,t = {1,2}, k = {"8","z"}, z = {1,1}, y = {{{},},2,3,4}}, {1,2,3,4,5,t = {1,2}, k = {"8","z"}, z = {1,1}, y = {{{},{},},2,3,4}} )))
print()
print( 'Testing operators' )
print( 'op.add()', assert( op.add( 5, 6 ) == 11 ))
print( 'op.sub()', assert( op.sub( 5, 6 ) == -1 ))
print( 'op.mul()', assert( op.mul( 5, 6 ) == 30 ))
print( 'op.div()', assert( op.div( 5 , 6 ) == 5/6 ))
print( 'op.idiv()', assert( op.idiv( 5 , 6 ) == 0 and op.idiv( -7, 6 ) == -1 ))
print( 'op.mod()', assert( op.mod( 5, 6 ) == 5 % 6 ))
print( 'op.pow()', assert( op.pow( 5, 6 ) == 5 ^ 6 ))
print( 'op.log()', assert( op.log( 100, 5 ) == math.log( 100, 5 )))
print( 'op.neg()', assert( op.neg( 5 ) == -5 ))
print( 'op.len()', assert( op.len{1,2,3,4,5,6,7} == 7 ))
print( 'op.inc()', assert( op.inc( 5 ) == 6 ))
print( 'op.dec()', assert( op.dec( 5 ) == 4 ))
print( 'op.concat()', assert( op.concat( 'xxx', 'yyy' ) == 'xxxyyy' ))
print()
print( 'Testing predicates' )
print( 'op.isid()', assert( op.isid('__ddd') and not op.isid('31sdofi') and not op.isid('da$df')))
print( 'op.isnil()', assert( op.isnil( nil ) and not op.isnil( 5 )))
print( 'op.isnotnil()', assert( op.isnotnil( 5 ) and not op.isnotnil( nil )))
print( 'op.istrue()', assert( op.istrue( true )))
print( 'op.isfalse()', assert( op.isfalse( false )))
print( 'op.isnumber()', assert( op.isnumber( 1 )))
print( 'op.isstring()', assert( op.isstring('')))
print( 'op.isfunction()', assert( op.isfunction( print )))
print( 'op.isuserdata()', assert( op.isuserdata( io.tmpfile() )))
print( 'op.isthread()', assert( op.isthread( coroutine.create(function()end))))
print()
print( 'Testing logical operators' )
print( 'op.lor()', assert( op.lor( true, false )))
print( 'op.land()', assert( not op.land( true, false )))
print( 'op.lnot()', assert( not op.lnot( true )))
print()
print( 'Testing comparsion operators' )
print( 'op.gt()', assert( op.gt( 10, 5 ) and not op.gt( 10, 10 )))
print( 'op.ge()', assert( op.ge( 10, 10 ) and op.ge( 10, 5 )))
print( 'op.lt()', assert( op.lt( 5, 10 ) and not op.lt( 5, 5 )))
print( 'op.le()', assert( op.le( 5, 10 ) and op.le( 5, 5 )))
print( 'op.eq()', assert( op.eq( 5, 5 ) and not op.eq( 5, 10 )))
print( 'op.ne()', assert( op.ne( 5, 10 ) and not op.ne( 5, 5 )))
print()
print( 'Testing special comparsion operators' )
print( 'op.eq0()', assert( op.eq0( 0 ) and not op.eq0( 3 )))
print( 'op.ne0()', assert( op.ne0( 5 ) and not op.ne0( 0 )))
print( 'op.positive()', assert( op.positive( 5 ) and not op.positive( 0 ) and not op.positive( -5 )))
print( 'op.negative()', assert( op.negative( -5 ) and not op.negative( 0 ) and not op.negative( 4 )))
print( 'op.even()', assert( op.even( 2 ) and not op.even( 3 )))
print( 'op.odd()', assert( op.odd( 3 ) and not op.odd( 2 )))
print()
print( 'Testing operator closures' )
print( 'opc.add()', assert( opc.add( 5 )( 6 ) == 11 ))
print( 'opc.sub()', assert( opc.sub( 5 )( 6 ) == 1 ))
print( 'opc.mul()', assert( opc.mul( 5)( 6 ) == 30 ))
print( 'opc.div()', assert( opc.div( 5 )( 6 ) == 6/5 ))
print( 'opc.idiv()', assert( opc.idiv( 5 )( 6 ) == 1 and opc.idiv( 6 )( -7 ) == -1 ))
print( 'opc.mod()', assert( opc.mod( 5 )( 6 ) == 6 % 5 ))
print( 'opc.pow()', assert( opc.pow( 5 )( 6 ) == 6 ^ 5 ))
print( 'opc.expt()', assert( opc.expt( 5 )( 6 ) == 5 ^ 6 ))
print( 'opc.log()', assert( opc.log( 5 )( 100 ) == math.log( 100, 5 )))
print( 'opc.concatl()', assert( opc.concatl( 'xxx')( 'yyy' ) == 'xxxyyy' ))
print( 'opc.concatr()', assert( opc.concatr( 'xxx')( 'yyy' ) == 'yyyxxx' ))
print( 'opc.c()', assert( opc.c( 5 )() == 5 ))
print()
print( 'Testing comparsion closures' )
print( 'opc.gt()', assert( opc.gt( 5 )( 10 ) and not opc.gt( 10 )( 10 )))
print( 'opc.ge()', assert( opc.ge( 10 )( 10 ) and opc.ge( 5 )( 10 )))
print( 'opc.lt()', assert( opc.lt( 10 )( 5 ) and not opc.lt( 10)( 10 )))
print( 'opc.le()', assert( opc.le( 10 )( 5 ) and opc.le( 5 )( 5 )))
print( 'opc.eq()', assert( opc.eq( 5 )( 5 ) and not opc.eq( 5 )( 10 )))
print( 'opc.ne()', assert( opc.ne( 5 )( 10 ) and not opc.ne( 5 )( 5 )))
print( 'opc.equal()', assert( opc.equal{1,2,x = 5,{3}}{1,2,x = 5,{3}}))
print()
print( 'Testing logical closures' )
print( 'opc.lnot()', assert( opc.lnot( false )()))
print( 'opc.lor()', assert( opc.lor( false )(true) and opc.lor( true )(false)))
print( 'opc.land()', assert( opc.land( true )(true) and not opc.land( true )(false)))
print()
print( 'Testing logical composition closures' )
print( 'opc.fnot', assert( opc.fnot( opc.gt( 5 ))( 2 )))
print( 'opc.fand', assert( opc.fand( op.even, opc.gt( 7 ))( 8 ) and not opc.fand( op.even, opc.gt( 7 ))( 9 ) and not opc.fand( op.even, opc.gt( 7 ))( 6 ) ))
print( 'opc.fnor', assert( opc.fnor( op.even, opc.gt( 7 ))( 4 ) and opc.fnor( op.even, opc.gt( 7 ))( 9 ) ))
print()
print( 'Testing compose() 1', assert( compose( math.sin )(5) == math.sin(5)))
print( 'Testing compose() 2', assert( compose( math.sin, math.cos )(5) == math.cos( math.sin(5))))
print( 'Testing compose() 3', assert( compose( math.sin, math.cos, math.sin )(5) == math.sin(math.cos(math.sin(5)))))
print( 'Testing compose() 4', assert( compose( math.sin, math.cos, math.sin, math.cos )(5) == math.cos( math.sin( math.cos( math.sin(5))))))
print( 'Testing compose() 5', assert( compose( math.sin, math.cos, math.sin, math.cos, math.sin )(5) == math.sin( math.cos( math.sin( math.cos( math.sin(5)))))))
print( 'Testing compose() 6', assert( compose( math.sin, math.cos, math.sin, math.cos, math.sin, math.cos )(5) == math.cos( math.sin( math.cos( math.sin( math.cos (math.sin(5))))))))
print()
print( 'Testing common high-order functions')
print( 'map()', assert( equal( map( opc.pow(2), {1,2,3,4,5}), {1,4,9,16,25} )))
local sum_ = 0
 each( function(x) sum_ = sum_ + x end , {1,2,3,4,5} )
print( 'each()', assert( sum_ == 15))
print( 'filter()', assert( equal( filter( opc.ge(5), {1,2,3,4,5,6,7,8,9,10} ), {5,6,7,8,9,10})))
print( 'foldl()', assert( foldl( op.add, 0, {1,2,3,4} ) == 10 ))
print( 'foldr()', assert( foldr( op.sub, 0, {1,2,3,4} ) == -10 ))
print( 'vmap()', assert( equal( vmap( opc.mul(2), {k = 6, v = 12} ), {k = 12, v = 24} )))
local txt = ''
veach( function( v )
	txt = txt .. v
end, {'a','b','c'} )
print( 'veach()', assert( txt == 'abc' ))
print( 'vfilter()', assert( equal( vfilter( opc.gt( 2 ), {k = 4, z = 2, y = 7, w = -1}), {k = 4, y = 7})))
print( 'vreduce()', assert( vreduce( op.mul, 1, {k = 2, v = 5, w = 4}) == 40 ))
print( 'sum()', assert( sum{1,2,3,4} == 10 ))
print()
print( 'Testing destructive high-order functions')
print( 'mapin()', assert( equal( mapin( opc.pow(2), {1,2,3,4,5} ), {1,4,9,16,25} )))
print( 'vmapin()', assert( equal( vmapin( opc.mul(2), {k=6,v=12,d=24}), {k=12,v=24,d=48} )))
print( 'vfilterin()', assert( equal( vfilterin( opc.gt( 2 ), {k = 4, z = 2, y = 7, w = -1}), {k = 4, y = 7} )))
print()
local r = range( 10 )
print( 'Testing range() 1', assert( equal( r, {1,2,3,4,5,6,7,8,9,10} )))
print( 'Testing range() 2', assert( equal( range( 5, 10), {5,6,7,8,9,10} )))
print( 'Testing range() 3', assert( equal( range( -10, 1, 3 ), {-10, -7,-4,-1} )))
print()
print( 'Testing transformations' )
print( 'slice() 1', assert( equal( slice( r, 5 ), {1,2,3,4,5} )))
print( 'slice() 2', assert( equal( slice( r, -3), {1,2,3,4,5,6,7,8} )))
print( 'slice() 3', assert( equal( slice( r, 2, 4), {2,3,4} )))
print( 'slice() 4', assert( equal( slice( r, 2,-2), {2,3,4,5,6,7,8,9} )))
print( 'slice() 5', assert( equal( slice( r, -10, -10 ), {1} )))
print( 'reverse()', assert( equal( reverse{1,2,3,4,5}, {5,4,3,2,1} )))
print( 'topairs()', assert( equal( frompairs( topairs{k = 55, z = 33, v = 'xx'} ), frompairs{{'k',55},{'z',33},{'v','xx'}})) )
print( 'frompairs()', assert( equal( frompairs{{'xxx',55},{'v',{3}},{5,'g'}}, {xxx=55, v = {3}, [5] = 'g'})))
print( 'flatten()', assert( equal( flatten{{1,2,{3},4,5,6},7,{8,{{{9}}}}}, {1,2,3,4,5,6,7,8,9} )))
print( 'shuffle{1,2,3,4,5,6,7,8,9,10}', xtostring( shuffle{1,2,3,4,5,6,7,8,9,10}) )
print( 'shufflein{1,2,3,4,5,6,7,8,9,10}', xtostring( shufflein{1,2,3,4,5,6,7,8,9,10}) )
local r2 = range( 100000 )
print()
print( 'Testing searching' )
print( 'indexof() 1', assert( indexof( r, 5 ) == 5 ))
print( 'indexof() 2', assert( indexof( r2, 75000, true ) == 75000 ))
print( 'indexof() 3', assert( indexof( reverse( r2 ), 75000, op.gt ) == 25001 ))
print( 'indexof() 4', assert( indexof( r, 55 ) == nil ))
print( 'keyof()', assert( keyof( {k = 55, z = 33, v = 'xx'}, 33 ) == 'z' ))

print()
print( 'Testing set functions' )
print( 'set()', assert( equal( set( 'xxx', 1, 2, 3, 'bmv' ), {true, true, true, bmv = true, xxx = true} )))
print( 'intersect()', assert( equal( intersect( set( 1, 2, 3, 4, 5, 6 ), set( 5, 6, 7, 8, 9, 10 )), set( 5, 6 ))))
print( 'union()', assert( equal( union( set( 1, 2, 3, 4, 5, 6 ), set( 6, 7, 8, 9, 10 )), set( 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))))
print( 'difference()', assert( equal( difference( set( 1, 2, 3, 4, 5, 6, 7 ), set( 3, 4, 5 )), set( 1, 2, 6, 7 ))))
print()
print( 'Testing copy' )
print( 'copy', assert( equal( copy{1,2,3,4,5,6,7,k=7,v=8}, {1,2,3,4,5,6,7,k=7,v=8} )))
print( 'deepcopy', assert( equal( deepcopy{1,2,3,k ={4,5,v = {9,10}}}, {1,2,3,k={4,5,v={9,10}}} )))
print()
print( 'Tesing zipping' )
print( 'zip()', assert( equal( zip({1,2,3,4,5},{'a','b','c','d','e'},{true,false,true,false}), {{1,'a',true},{2,'b',false},{3,'c',true},{4,'d',false}} )))
print( 'unzip()', assert( equal( {unzip( {{1,'a',-1},{2,'b',-2},{3,'c',-3},{4,'d',-4,true}} )}, {{1,2,3,4},{'a','b','c','d'},{-1,-2,-3,-4}} )))
print( 'kvzip() 1', assert( equal( kvzip( {1,2,3,4,5},{'x','y','z','u','v'} ), {'x','y','z','u','v'} )))
print( 'kvzip() 2', assert( equal( kvzip( {'x','y','z','u','v'}, {1,2,3,4,5} ), {x=1,y=2,z=3,u=4,v=5} )))
print( 'kvunzip()', assert( equal( kvzip( kvunzip( {x=1,y=2,z=3,u=4,v=5} )), {x=1, y=2, z=3, u=4, v=5} )))
print()
print( 'Testing traverse', traverse( _G, function(v,k,level) if k == 'sin' then return v(7) end end ) == math.sin(7))
print ('Testing unique', assert( equal( unique{1,1,2,3,3,3,4,5,'x','y','x'}, {1,2,3,4,5,'x','y'} )))
print()
print( 'diffmemory {}', diffmemory( function() return {} end ))
print( 'diffmemory {1,2,3}', diffmemory( function() return {1,2,3} end ))
print( 'diffmemory {x = 2, y = 5}', diffmemory( function() return {x=2, y=5} end))
local function fib(n)
	if n <= 2 then
		return 1
	else
		return fib(n-1) + fib(n-2)
	end
end
print( 'diffclock fib(30)', diffclock( fib, 30 ))
print( 'ndiffclock fib(30)', ndiffclock(10,fib,30))

print()
print('Testing permutations', assert( equal( permutations{1,2,3}, {{1,2,3},{1,3,2},{2,1,3},{2,3,1},{3,1,2},{3,2,1}})))
print('Testing combinations', assert( equal( combinations{{'a','b'},{1,2,3}}, {{'a',1},{'a',2},{'a',3},{'b',1},{'b',2},{'b',3}} )))
