print( 'Testing loot package' )
print( '====================' )

require('loot').export()

print( 'Testing nkeys()', nkeys{1,2,3,4,5,6,7,x=8,y=9,z={10}} == 10 )
print( 'Testing equal()', equal( {1,2,3,4,5,t = {1,2}, k = {"8","z"}, z = {1,1}, y = {{{},{},},2,3,4}}, {1,2,3,4,5,t = {1,2}, k = {"8","z"}, z = {1,1}, y = {{{},{},},2,3,4}} ))
print( 'Testing not equal()', not equal( {1,2,3,4,5,t = {1,2}, k = {"8","z"}, z = {1,1}, y = {{{},},2,3,4}}, {1,2,3,4,5,t = {1,2}, k = {"8","z"}, z = {1,1}, y = {{{},{},},2,3,4}} ))
print()
print( 'Testing operators' )
print( 'op.add()', op.add( 5, 6 ) == 11 )
print( 'op.sub()', op.sub( 5, 6 ) == -1 )
print( 'op.mul()', op.mul( 5, 6 ) == 30 )
print( 'op.div()', op.div( 5 , 6 ) == 5/6 )
print( 'op.idiv()', op.idiv( 5 , 6 ) == 0 and op.idiv( -7, 6 ) == -1 )
print( 'op.mod()', op.mod( 5, 6 ) == 5 % 6 )
print( 'op.pow()', op.pow( 5, 6 ) == 5 ^ 6 )
print( 'op.log()', op.log( 100, 5 ) == math.log( 100, 5 ))
print( 'op.neg()', op.neg( 5 ) == -5 )
print( 'op.len()', op.len{1,2,3,4,5,6,7} == 7 )
print( 'op.inc()', op.inc( 5 ) == 6 )
print( 'op.dec()', op.dec( 5 ) == 4 )
print( 'op.concat()', op.concat( 'xxx', 'yyy' ) == 'xxxyyy' )
print()
print( 'Testing predicates' )
print( 'op.isid()', op.isid('__ddd') and not op.isid('31sdofi') and not op.isid('da$df'))
print( 'op.isnil()', op.isnil( nil ))
print( 'op.istrue()', op.istrue( true ))
print( 'op.isfalse()', op.isfalse( false ))
print( 'op.isnumber()', op.isnumber( 1 ))
print( 'op.isstring()', op.isstring(''))
print( 'op.isfunction()', op.isfunction( print ))
print( 'op.isuserdata()', op.isuserdata( io.tmpfile() ))
print( 'op.isthread()', op.isthread( coroutine.create(function()end)))
print()
print( 'Testing logical operators' )
print( 'op.lor()', op.lor( true, false ))
print( 'op.land()', not op.land( true, false ))
print( 'op.lnot()', not op.lnot( true ))
print()
print( 'Testing comparsion operators' )
print( 'op.gt()', op.gt( 10, 5 ) and not op.gt( 10, 10 ))
print( 'op.ge()', op.ge( 10, 10 ) and op.ge( 10, 5 ))
print( 'op.lt()', op.lt( 5, 10 ) and not op.lt( 5, 5 ))
print( 'op.le()', op.le( 5, 10 ) and op.le( 5, 5 ))
print( 'op.eq()', op.eq( 5, 5 ) and not op.eq( 5, 10 ))
print( 'op.ne()', op.ne( 5, 10 ) and not op.ne( 5, 5 ))
print()
print( 'Testing special comparsion operators' )
print( 'op.eq0()', op.eq0( 0 ) and not op.eq0( 3 ))
print( 'op.ne0()', op.ne0( 5 ) and not op.ne0( 0 ))
print( 'op.positive()', op.positive( 5 ) and not op.positive( 0 ) and not op.positive( -5 ))
print( 'op.negative()', op.negative( -5 ) and not op.negative( 0 ) and not op.negative( 4 ))
print( 'op.even()', op.even( 2 ) and not op.even( 3 ))
print( 'op.odd()', op.odd( 3 ) and not op.odd( 2 ))
print()
print( 'Testing operator closures' )
print( 'opc.add()', opc.add( 5 )( 6 ) == 11 )
print( 'opc.sub()', opc.sub( 5 )( 6 ) == 1 )
print( 'opc.mul()', opc.mul( 5)( 6 ) == 30 )
print( 'opc.div()', opc.div( 5 )( 6 ) == 6/5 )
print( 'opc.idiv()', opc.idiv( 5 )( 6 ) == 1 and opc.idiv( 6 )( -7 ) == -1 )
print( 'opc.mod()', opc.mod( 5 )( 6 ) == 6 % 5 )
print( 'opc.pow()', opc.pow( 5 )( 6 ) == 6 ^ 5 )
print( 'opc.expt()', opc.expt( 5 )( 6 ) == 5 ^ 6 )
print( 'opc.log()', opc.log( 5 )( 100 ) == math.log( 100, 5 ))
print( 'opc.concatl()', opc.concatl( 'xxx')( 'yyy' ) == 'xxxyyy' )
print( 'opc.concatr()', opc.concatr( 'xxx')( 'yyy' ) == 'yyyxxx' )
print( 'opc.c()', opc.c( 5 )() == 5 )
print()
print( 'Testing comparsion closures' )
print( 'opc.gt()', opc.gt( 5 )( 10 ) and not opc.gt( 10 )( 10 ))
print( 'opc.ge()', opc.ge( 10 )( 10 ) and opc.ge( 5 )( 10 ))
print( 'opc.lt()', opc.lt( 10 )( 5 ) and not opc.lt( 10)( 10 ))
print( 'opc.le()', opc.le( 10 )( 5 ) and opc.le( 5 )( 5 ))
print( 'opc.eq()', opc.eq( 5 )( 5 ) and not opc.eq( 5 )( 10 ))
print( 'opc.ne()', opc.ne( 5 )( 10 ) and not opc.ne( 5 )( 5 ))
print( 'opc.equal()', opc.equal{1,2,x = 5,{3}}{1,2,x = 5,{3}})
print()
print( 'Testing compose() 1', compose( math.sin )(5) == math.sin(5))
print( 'Testing compose() 2', compose( math.sin, math.cos )(5) == math.cos( math.sin(5)))
print( 'Testing compose() 3', compose( math.sin, math.cos, math.sin )(5) == math.sin(math.cos(math.sin(5))))
print( 'Testing compose() 4', compose( math.sin, math.cos, math.sin, math.cos )(5) == math.cos( math.sin( math.cos( math.sin(5)))))
print( 'Testing compose() 5', compose( math.sin, math.cos, math.sin, math.cos, math.sin )(5) == math.sin( math.cos( math.sin( math.cos( math.sin(5))))))
print( 'Testing compose() 6', compose( math.sin, math.cos, math.sin, math.cos, math.sin, math.cos )(5) == math.cos( math.sin( math.cos( math.sin( math.cos (math.sin(5)))))))
print()
print( 'Testing common high-order functions')
print( 'map()', equal( map( opc.pow(2), {1,2,3,4,5}), {1,4,9,16,25} ))
local sum_ = 0
 each( function(x) sum_ = sum_ + x end , {1,2,3,4,5} )
print( 'each()', sum_ == 15)
print( 'filter()', equal( filter( opc.ge(5), {1,2,3,4,5,6,7,8,9,10} ), {5,6,7,8,9,10}))
print( 'foldl()', foldl( op.add, 0, {1,2,3,4} ) == 10 )
print( 'foldr()', foldr( op.sub, 0, {1,2,3,4} ) == -10 )
print( 'kvmap()', equal( kvmap( opc.mul(2), {k = 6, v = 12} ), {k = 12, v = 24} ))
local txt = ''
kveach( function( v, k )
	txt = txt .. v
end, {'a','b','c'} )
print( 'kveach()', txt == 'abc' )
print( 'kvfilter()', equal( kvfilter( opc.gt( 2 ), {k = 4, z = 2, y = 7, w = -1}), {k = 4, y = 7}))
print( 'kvreduce()', kvreduce( op.mul, 1, {k = 2, v = 5, w = 4}) == 40 )
print( 'sum()', sum{1,2,3,4} == 10 )
print()
print( 'Testing destructive high-order functions')
print( 'mapin()', equal( mapin( opc.pow(2), {1,2,3,4,5} ), {1,4,9,16,25} ))
print( 'kvmapin()', equal( kvmapin( opc.mul(2), {k=6,v=12,d=24}), {k=12,v=24,d=48} ))
print( 'kvfilterin()', equal( kvfilterin( opc.gt( 2 ), {k = 4, z = 2, y = 7, w = -1}), {k = 4, y = 7} ))
print()
local r = range( 10 )
print( 'Testing range() 1', equal( r, {1,2,3,4,5,6,7,8,9,10} ))
print( 'Testing range() 2', equal( range( 5, 10), {5,6,7,8,9,10} ))
print( 'Testing range() 3', equal( range( -10, 1, 3 ), {-10, -7,-4,-1} ))
print()
print( 'Testing transformations' )
print( 'slice() 1', equal( slice( r, 5 ), {1,2,3,4,5} ))
print( 'slice() 2', equal( slice( r, -3), {1,2,3,4,5,6,7,8} ))
print( 'slice() 3', equal( slice( r, 2, 4), {2,3,4} ))
print( 'slice() 4', equal( slice( r, 2,-2), {2,3,4,5,6,7,8,9} ))
print( 'slice() 5', equal( slice( r, -10, -10 ), {1} ))
print( 'reverse()', equal( reverse{1,2,3,4,5}, {5,4,3,2,1} ))
print( 'topairs()', equal( frompairs( topairs{k = 55, z = 33, v = 'xx'} ), frompairs{{'k',55},{'z',33},{'v','xx'}})) 
print( 'frompairs()', equal( frompairs{{'xxx',55},{'v',{3}},{5,'g'}}, {xxx=55, v = {3}, [5] = 'g'}))
print( 'flatten()', equal( flatten{{1,2,{3},4,5,6},7,{8,{{{9}}}}}, {1,2,3,4,5,6,7,8,9} ))
print( 'shuffle{1,2,3,4,5,6,7,8,9,10}', xtostring( shuffle{1,2,3,4,5,6,7,8,9,10}) )
local r2 = range( 100000 )
print()
print( 'Testing searching' )
print( 'indexof() 1', indexof( r, 5 ) == 5 )
print( 'indexof() 2', indexof( r2, 75000, true ) == 75000 )
print( 'indexof() 3', indexof( reverse( r2 ), 75000, op.gt ) == 25001 )
print( 'indexof() 4', indexof( r, 55 ) == nil )
print( 'keyof()', keyof( {k = 55, z = 33, v = 'xx'}, 33 ) == 'z' )

print()
print( 'Testing set functions' )
print( 'set()', equal( set( 'xxx', 1, 2, 3, 'bmv' ), {true, true, true, bmv = true, xxx = true} ))
print( 'intersect()', equal( intersect( set( 1, 2, 3, 4, 5, 6 ), set( 5, 6, 7, 8, 9, 10 )), set( 5, 6 )))
print( 'union()', equal( union( set( 1, 2, 3, 4, 5, 6 ), set( 6, 7, 8, 9, 10 )), set( 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))
print( 'difference()', equal( difference( set( 1, 2, 3, 4, 5, 6, 7 ), set( 3, 4, 5 )), set( 1, 2, 6, 7 )))
print()
print( 'Testing copy' )
print( 'copy', equal( copy{1,2,3,4,5,6,7,k=7,v=8}, {1,2,3,4,5,6,7,k=7,v=8} ))
print( 'deepcopy', equal( deepcopy{1,2,3,k ={4,5,v = {9,10}}}, {1,2,3,k={4,5,v={9,10}}} ))
print()
print( 'Tesing zipping' )
print( 'zip()', equal( zip({1,2,3,4,5},{'a','b','c','d','e'},{true,false,true,false}), {{1,'a',true},{2,'b',false},{3,'c',true},{4,'d',false}} ))
print( 'unzip()', equal( {unzip( {{1,'a',-1},{2,'b',-2},{3,'c',-3},{4,'d',-4,true}} )}, {{1,2,3,4},{'a','b','c','d'},{-1,-2,-3,-4}} ))
print( 'kvzip() 1', equal( kvzip( {1,2,3,4,5},{'x','y','z','u','v'} ), {'x','y','z','u','v'} ))
print( 'kvzip() 2', equal( kvzip( {'x','y','z','u','v'}, {1,2,3,4,5} ), {x=1,y=2,z=3,u=4,v=5} )) 
print( 'kvunzip()', equal( kvzip( kvunzip( {x=1,y=2,z=3,u=4,v=5} )), {x=1, y=2, z=3, u=4, v=5} ))
print()
print( 'Testing traverse', traverse( _G, function(v,k,level) if k == 'sin' then return v(7) end end ) == math.sin(7))
